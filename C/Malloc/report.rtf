{\rtf1\ansi\ansicpg1252\cocoartf2511
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww10980\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \'97\'97\'97\'97\'97Local machine\'97\'97\'97\'97\'97\'97\
OS: macOS Catalina 10.15.3\
RAM: 16GB\
Processor: 6-core 2.6GHz\
\
\'97\'97\'97\'97\'97Virtual machine\'97\'97\'97\'97\'97\'97\
OS: Debian 10 (Buster)\
RAM: 2GB\
Processor: 2-core 2.6GHz\
\
\'97\'97\'97\'97\'97CCIS server\'97\'97\'97\'97\'97\'97\'97\
OS: CentOS Linux 7 (Core)\
RAM: 187GB\
Processor: 48-Core 2.3GHz\
\
    \'97\'97\'97\'97\'97\'97Time is real time measured in seconds\'97\'97\'97\'97\'97\'97\'97\
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\
\ul Threads	| Local	 Time	| CCIS	Time	| Local Speedup | CCIS Speedup |\ulnone \
	1	|  10.454	|   16.998	|          1	     |             1           |\
	4	|   6.759	|    8.142	|        1.547	     |          2.088       |\
	8	|   6.050	|    5.499	|        1.728         |          3.091       |\
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ri1202\pardirnatural\partightenfactor0
\cf0 These results show the CCIS server offered higher parallel speedup than my local machine, which with 8 threads running offered only a 1.728 parallel performance boost compared to just one thread. The reason for this speedup (or lack thereof) is that a large portion of the workload exists outside of the threads. With higher thread counts, the work they do is still being sped up, but the workload done in the setup() and other functions outside of the worker functions remains the same regardless of the number of threads. In addition, the lower speedup on my local machine is likely due to the fact there are only two cores allocated to the virtual machine. Even with a 6-core processor, only having access to 2 cores reduces the effectiveness of high thread count processes beyond the 4 threads it can support. Likewise, with the CCIS server having 48 cores, the parallel speedup was much more apparent. \
\
The parallel speedup with this threads assignment was larger that with the processes/mmap() in the previous this assignment. This is largely due to the nature of threads being faster to run than processes that fork(). Threads are faster the start and stop than processes, which allow them to start working faster and for the main program to not have to wait as long to stop them. }